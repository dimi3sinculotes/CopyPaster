
import com.sun.webkit.event.WCKeyEvent;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.effect.BlendMode;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author operador
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        lblMode = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(java.awt.Color.darkGray);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Control UVE");

        input.setColumns(20);
        input.setRows(5);
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(input);

        jButton1.setBackground(java.awt.Color.lightGray);
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblMode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblMode.setForeground(java.awt.Color.white);
        lblMode.setText("MODO: ENTER PARA ENVIAR");

        jButton2.setText("MODE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Recuerda siempre que escribas en UniVerse tener activado el BLOQ. MAYUSC");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jButton1)
                        .addGap(90, 90, 90)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(lblMode))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel2)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(lblMode)
                    .addComponent(jButton2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dmethod();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void inputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyTyped

    }//GEN-LAST:event_inputKeyTyped

    private void inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(!mode){
                dmethod();
            }
        }
    }//GEN-LAST:event_inputKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(mode){
            mode = false;
            lblMode.setText("MODO: ENTER PARA ENVIAR");
        }else{
            mode = true;
            lblMode.setText("MODO: ENTER SE PULSAR√Å EN UNIVERSE");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMode;
    // End of variables declaration//GEN-END:variables

    public boolean mode = false;
    
    public void dmethod(){
        
        Robot r;
        try {
            r = new Robot();

            String cntnt = input.getText().toString();
            String[] ac = cntnt.split("");

            r.delay(800);
            for (int i = 0; i < ac.length; i++) {
                r.delay(3);
                switch (ac[i]) {
                    case " ":
                        r.keyPress(KeyEvent.VK_SPACE);
                        r.keyRelease(KeyEvent.VK_SPACE);
                        break;

                    case "=":
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_0);
                        r.keyRelease(KeyEvent.VK_0);
                        r.keyRelease(KeyEvent.VK_SHIFT);
                        break;
                    case ";":                        
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_COMMA);
                        r.keyRelease(KeyEvent.VK_COMMA);
                        r.keyRelease(KeyEvent.VK_SHIFT);
                        break;
                    case "(":                        
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_8);
                        r.keyRelease(KeyEvent.VK_8);
                        r.keyRelease(KeyEvent.VK_SHIFT);
                        break;
                    case ")":                        
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_9);
                        r.keyRelease(KeyEvent.VK_9);
                        r.keyRelease(KeyEvent.VK_SHIFT);
                        break;
                    case ":":                        
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_PERIOD);
                        r.keyRelease(KeyEvent.VK_PERIOD);
                        r.keyRelease(KeyEvent.VK_SHIFT);                        
                        break;
                    case "[":
                        r.keyPress(KeyEvent.VK_CONTROL);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_ALT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_DEAD_GRAVE);
                        r.keyRelease(KeyEvent.VK_DEAD_GRAVE);
                        r.keyRelease(KeyEvent.VK_ALT);
                        r.keyRelease(KeyEvent.VK_CONTROL); 
                        break;
                    case "]":
                        r.keyPress(KeyEvent.VK_CONTROL);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_ALT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_PLUS);
                        r.delay(5);
                        r.keyRelease(KeyEvent.VK_PLUS);
                        r.keyRelease(KeyEvent.VK_ALT);
                        r.keyRelease(KeyEvent.VK_CONTROL);                        
                        break;
                    case ">":
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_LESS);
                        r.keyRelease(KeyEvent.VK_LESS);
                        r.keyRelease(KeyEvent.VK_SHIFT);   
                        break;
                    case "\"":
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_2);
                        r.keyRelease(KeyEvent.VK_2);
                        r.keyRelease(KeyEvent.VK_SHIFT);                         
                        break;
                    case "@":
                        r.keyPress(KeyEvent.VK_CONTROL);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_ALT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_2);
                        r.keyRelease(KeyEvent.VK_2);
                        r.keyRelease(KeyEvent.VK_ALT);
                        r.keyRelease(KeyEvent.VK_CONTROL);
                        break;
                    case"*":
                        r.keyPress(KeyEvent.VK_MULTIPLY);
                        r.keyRelease(KeyEvent.VK_MULTIPLY);
                        break;
                    case "#":
                        r.keyPress(KeyEvent.VK_CONTROL);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_ALT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_3);
                        r.keyRelease(KeyEvent.VK_3);
                        r.keyRelease(KeyEvent.VK_ALT);
                        r.keyRelease(KeyEvent.VK_CONTROL);
                        break;
                    case "/":                    
                        r.keyPress(KeyEvent.VK_SHIFT);
                        r.delay(5);
                        r.keyPress(KeyEvent.VK_7);
                        r.keyRelease(KeyEvent.VK_7);
                        r.keyRelease(KeyEvent.VK_SHIFT);
                        break;
                        
                    case "\n":
                        if(mode){
                            r.keyPress(KeyEvent.VK_ENTER);
                            r.keyRelease(KeyEvent.VK_ENTER);
                        }
                        break;
                    default:
                        int kcode = KeyEvent.getExtendedKeyCodeForChar(ac[i].charAt(0));
                        r.keyPress(kcode);
                        r.keyRelease(kcode);
                        break;
                }

                r.delay(5);
            }
        } catch (AWTException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
